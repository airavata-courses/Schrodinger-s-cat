logging.level.org.springframework=info
#management.endpoints.web.exposure.include=*

#spring.security.user.name=user1
#spring.security.user.password=secret1

spring.jpa.show-sql=true
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
server.port=8888

#==== connect to mysql ======#

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.hibernate.ddl-auto=update

#changging local host to 127.0.0.1 for docker
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/loginAuth?useSSL=false
#spring.datasource.username=nawaz
#spring.datasource.password=password
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#spring.queries.users-query=select email, password, active from user where email=?
spring.queries.users-query=select email, password, active from myUser where email=?
#spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?
spring.queries.roles-query=select u.email, r.role from myUser u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

spring.datasource.initialization-mode=always
